<?php

namespace AdirKuhn\CashFlowBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AccountsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccountsRepository extends EntityRepository
{
    /**
     * Get all year with have accounts that not paid
     *
     * @author Adir Kuhn <adirkuhn@gmail.com>
     *
     * @return array Years who have accounts
     */
    public function getYearsWithAccounts()
    {
        return $this->getEntityManager()
            ->createQuery("
                SELECT DISTINCT
                    SUBSTRING(accounts.dueDate, 1, 4) as year
                FROM
                    CashFlowBundle:Accounts accounts
                GROUP BY
                    year
            ")
            ->getResult();
    }

//    public function getYearsWithAllAccounts()
//    {
//        return $this->getEntityManager()
//            ->createQuery("
//                SELECT DISTINCT
//                    SUBSTRING(accounts.dueDate, 1, 4) as year
//                FROM
//                    CashFlowBundle:Accounts accounts
//                GROUP BY
//                    year
//            ")
//            ->getResult();
//    }

    public function getAccountsByYearAndMonth($type, $year, $month)
    {
        $dtStart = $year . '-' . $month . '-01';
        $dtEnd = $year . '-' . $month . '-31';

        return $this->getEntityManager()
            ->createQuery("
                SELECT
                    accounts
                FROM
                    CashFlowBundle:Accounts accounts
                WHERE
                    accounts.type = :type
                AND
                    accounts.dueDate
                BETWEEN
                    :dtStart
                AND
                    :dtEnd
                ORDER BY
                    accounts.dueDate ASC
            ")

            ->setParameters(array(
                'type' => $type,
                'dtStart' => $dtStart,
                'dtEnd' => $dtEnd
            ))

            ->getResult();
    }

    public function getSumAccountsByYearAndMonth($type, $year, $month)
    {
        $dtStart = $year . '-' . $month . '-01';
        $dtEnd = $year . '-' . $month . '-31';

        $result = $this->getEntityManager()
            ->createQuery("
                SELECT
                    sum(accounts.value) as sumAccounts
                FROM
                    CashFlowBundle:Accounts accounts
                WHERE
                    accounts.type = :type
                AND
                    accounts.dueDate
                BETWEEN
                    :dtStart
                AND
                    :dtEnd
            ")

            ->setParameters(array(
                'type' => $type,
                'dtStart' => $dtStart,
                'dtEnd' => $dtEnd
            ))

            ->getResult();

        return number_format($result[0]['sumAccounts'], 2, ',', '');
    }

    public function getSumAccountsByYear($type, $year)
    {
        $dtStart = $year . '-01-01';
        $dtEnd = $year . '-12-31';

        $result = $this->getEntityManager()
            ->createQuery("
                SELECT
                    sum(accounts.value) as sumAccounts
                FROM
                    CashFlowBundle:Accounts accounts
                WHERE
                    accounts.type = :type
                AND
                    accounts.dueDate
                BETWEEN
                    :dtStart
                AND
                    :dtEnd
            ")

            ->setParameters(array(
                'type' => $type,
                'dtStart' => $dtStart,
                'dtEnd' => $dtEnd
            ))

            ->getResult();

        return number_format($result[0]['sumAccounts'], 2, ',', '');
    }

    public function getOverdueAccounts($type)
    {
        $date = date('Y-m-d');

        return $this->getEntityManager()
            ->createQuery("
                SELECT
                    accounts
                FROM
                    CashFlowBundle:Accounts accounts
                WHERE
                    accounts.type = :type
                AND
                    accounts.status = :status
                AND
                    accounts.dueDate < :date
                ORDER BY
                    accounts.dueDate ASC
            ")
            ->setParameters(array(
                'type' => $type,
                'status' => 1,
                'date' => $date
            ))
            ->getResult();
    }

    public function getSumOverdueAccounts($type)
    {
        $date = date('Y-m-d');

        $result = $this->getEntityManager()
            ->createQuery("
                SELECT
                    sum(accounts.value) as sumOverdueAccounts
                FROM
                    CashFlowBundle:Accounts accounts
                WHERE
                    accounts.type = :type
                AND
                    accounts.status = :status
                AND
                    accounts.dueDate < :date
            ")
            ->setParameters(array(
                'type' => $type,
                'status' => 1,
                'date' => $date
            ))
            ->getResult();

        return number_format($result[0]['sumOverdueAccounts'], 2, ',', '');
    }

}
